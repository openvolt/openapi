{
  "openapi": "3.0.0",
  "info": {
    "title": "Openvolt API",
    "description": "Openvolt developer API",
    "contact": {
      "email": "don@openvolt.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.openvolt.com/v1"
    }
  ],
  "tags": [
    {
      "name": "Meters",
      "description": ""
    }
  ],
  "paths": {
    "/meters": {
      "get": {
        "tags": ["Meters"],
        "summary": "List meters",
        "description": "The Meter Object contains the Meter Number (often referred to as the MPAN), and other meta data such as the last time data was pulled from the meter, the update frequency, the data source, and the status of the meter.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_number",
            "in": "query",
            "description": "Filter by meter number (mpan)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_data_pull_date",
            "in": "query",
            "description": "Filter by last_data_pull_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "last_data_pull_status",
            "in": "query",
            "description": "Filter by last_data_pull_status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["success", "failure"],
              "example": "success"
            }
          },
          {
            "name": "update_frequency",
            "in": "query",
            "description": "Filter by update_frequency",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hourly", "daily", "weekly", "monthly"],
              "example": "daily"
            }
          },
          {
            "name": "data_source",
            "in": "query",
            "description": "Filter by data_source",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["electralink", "dcc"],
              "example": "electralink"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "pending"],
              "example": "active"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["last_data_pull_date"],
              "example": "last_data_pull_date",
              "default": "last_data_pull_date"
            }
          },
          {
            "name": "missing_consent",
            "in": "query",
            "description": "Filter by missing_consent",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true"
            }
          },
          {
            "name": "expired_consent",
            "in": "query",
            "description": "Filter by expired_consent",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true"
            }
          },
          {
            "name": "is_disabled_by_user",
            "in": "query",
            "description": "Filter by is_disabled_by_user",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true"
            }
          },
          {
            "name": "has_invalid_meter_number",
            "in": "query",
            "description": "Filter by has_invalid_meter_number",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "example": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterListResponse"
                }
              }
            }
          }
        }
      },

      "post": {
        "tags": ["Meters"],
        "summary": "Create a meter",
        "description": "On the Openvolt platform, a meter is a digital representation of the physical meter that's on the side of your customer's building. It also includes information such as \n\n - Who we are accessing this meter data on_behalf_of (customer) \n - The consent information that is needed for that party to access the data (consent) \n - The schedule on how often the data is refreshed on the meter (schedule) \n - The source of the centralised datasource that the meter feeds into \n - Physical address and other information \n\n It's important to note, that it is possible to have multiple meters with the same meter_number if you are accessing data on_behalf_of different customers",
        "requestBody": {
          "description": "Meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "501": {
            "description": "Not Implemented"
          }
        }
      }
    },

    "/meters/{_id}": {
      "put": {
        "tags": ["Meters"],
        "summary": "Update a meter",
        "description": "Update a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterUpdateRequest"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "meter",
        "responses": {
          "201": {
            "description": "meter updated",
            "content": {}
          },
          "400": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Meters"],
        "summary": "Delete a meter",
        "description": "Delete a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "613a4b5acbcc00d89f06b6c0",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "204": {
            "description": "meter deleted",
            "content": {}
          },
          "404": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "get": {
        "tags": ["Meters"],
        "summary": "Retrieve a meter",
        "description": "Retrieve a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "meter successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterResponse"
                  },
                  "maxItems": 100
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    },
    "/meters/{_id}/update-consent": {
      "put": {
        "tags": ["Meters"],
        "summary": "Update a meter consent",
        "description": "Update a meter consent",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Meter consent id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterConsentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "meter",
        "responses": {
          "201": {
            "description": "meter updated",
            "content": {}
          },
          "400": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "List customers",
        "description": "This is the main search functionality for customers. You can filter by email, metadata, and page number.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Each customer email is unique, so filtering by customer will return a single customer.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of customers to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a customer",
        "description": "Most likely, your customers will be stored on your system with a unique id. Use the `metadata` property on the Openvolt `customer` object to store this data so you can link both objects together. \n\n Customer emails are also unique so can be used to retrieve a single customer.",
        "requestBody": {
          "description": "New Customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateRequest"
              }
            }
          },
          "x-codegen-request-body-name": "customer",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },

    "/customers/{_id}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a customer",
        "description": "Retrieve a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "customer successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Update a customer",
        "description": "Update a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "customer",
        "responses": {
          "201": {
            "description": "customer updated",
            "content": {}
          },
          "400": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a customer",
        "description": "Delete a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },

    "/interval-data": {
      "get": {
        "tags": ["Interval Data"],
        "summary": "Get interval data",
        "description": "",
        "parameters": [
          {
            "name": "meter_number",
            "in": "query",
            "description": "meter_number (also known as MPAN) can be used with different customers. If filtering by this, then also filter by customer_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "Commonly used with meter_number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_id",
            "in": "query",
            "description": "meter_id already contains the meter_number and customer_id, so can be used on its own",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "How granular to return the data. Half-hourly is denoted by 'hh'",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hh", "day", "week", "month", "year"],
              "example": "hh",
              "default": "hh"
            }
          },
          {
            "name": "lookback",
            "in": "query",
            "description": "timeperiod to lookback, in the form of a number followed by a letter, e.g. 1d, 1w, 3m, 1y",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1d",
              "default": "1d"
            }
          },

          {
            "name": "start_date",
            "in": "query",
            "description": "Filter by start_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter by end_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalDataListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/consents": {
      "get": {
        "tags": ["Consents"],
        "summary": "List consents",
        "description": "This is the main search functionality for consents. You can filter by customer_id, metadata, type, start and end dates.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Filter by start_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter by end_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["end_date, start_date"],
              "example": "end_date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          }
        }
      },

      "post": {
        "tags": ["Consents"],
        "summary": "Create a consent",
        "description": "",
        "requestBody": {
          "description": "Consent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/consent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/consents/{_id}": {
      "get": {
        "tags": ["Consents"],
        "summary": "Retrieve a consent",
        "description": "Retrieve a consent",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "consent object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "consent successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/consent"
                  },
                  "maxItems": 100
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    },
    "/documents": {
      "get": {
        "tags": ["Documents"],
        "summary": "List documents",
        "description": "This is the main search functionality for documents. You can filter by name, metadata, purpose.",
        "parameters": [
          
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "description": "Filter by purpose",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["consent_evidence"]
            }
            
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["end_date, start_date"],
              "example": "end_date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          }
        }
      },

      "post": {
        "tags": ["Documents"],
        "summary": "Create a document",
        "description": "",
        "requestBody": {
          "description": "Document",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/documents/{_id}": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve a document",
        "description": "Retrieve a document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "document object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "document successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/document"
                  }
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    },
    "/documents/{_id}/file": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve a document's file",
        "description": "Retrieve a document's file",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "document object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "file successfully retrieved",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    }

  },

  "security": [
    {
      "AuthKeyAuth": []
    }
  ],

  "components": {
    "securitySchemes": {
      "AuthKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "customer": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CustomerCreateRequest": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CustomerListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customer"
            }
          }
        }
      },
      "MeterCreateRequest": {
        "type": "object",
        "required": ["meter_number", "customer_id", "data_source"],
        "properties": {
          "meter_number": {
            "type": "string",
            "example": "10301782222",
            "description": "Meter Number (also known as MPAN) and is a required field. This in combination with `customer_id` is unique so can be used to retrieve a single meter."
          },
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Customer ID is a required field. This in combination with `meter_number` is unique so can be used to retrieve a single meter."
          },
          "consent_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "The ID of the Consent. If none is provided, the status of the meter will be set to inactive"
          },
          "description": {
            "type": "string",
            "example": "Electricity meter ground floor",
            "description": "Description of the meter. This is an optional field."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the meter. This is an optional field."
          },
          "data_source": {
            "type": "string",
            "enum": ["electralink", "dcc"],
            "example": "electralink",
            "description": "Data source"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "MeterUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Electricity meter ground floor",
            "description": "Description of the meter. This is an optional field."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the meter. This is an optional field."
          },
          "data_source": {
            "type": "string",
            "enum": ["electralink", "dcc"],
            "example": "electralink",
            "description": "Data source"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "MeterConsentUpdateRequest": {
        "type": "object",
        "properties": {
          "consent_id": {
            "type": "string",
            "nullable": true,
            "example": "6404dd7cf51306004a0cabf6",
            "description": "The ID of the Consent. If null is provided, it will remove the consent."
          }
        }
      },
      "MeterResponse": {
        "type": "object",
        "required": ["meter_number", "customer_id"],
        "properties": {
          "meter_number": {
            "type": "string",
            "example": "10301782222",
            "description": "Meter Number (also known as MPAN) and is a required field. This in combination with `customer_id` is unique so can be used to retrieve a single meter."
          },
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Customer ID is a required field. This in combination with `meter_number` is unique so can be used to retrieve a single meter."
          },
          "consent_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "The ID of the Consent. If none is provided, the status of the meter will be set to inactive"
          },
          "description": {
            "type": "string",
            "example": "Electricity meter ground floor",
            "description": "Description of the meter. This is an optional field."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the meter. This is an optional field."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          },
          "validity_state": {
            "type": "object",
            "properties": {
              "missing_consent": {
                "type": "boolean"
              },
              "expired_consent": {
                "type": "boolean"
              },
              "is_disabled_by_user": {
                "type": "boolean"
              },
              "has_invalid_meter_number": {
                "type": "boolean"
              }
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the meter",
            "enum": ["active", "inactive", "pending"],
            "example": "active"
          }
        }
      },
      "MeterListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterResponse"
            }
          }
        }
      },
      "interval_data": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "consumption": {
            "type": "number",
            "example": "123"
          },
          "consumption_units": {
            "type": "string",
            "enum": ["kwh"],
            "example": "kwh"
          },
          "account_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "meter_id": {
            "type": "string",
            "example": "63f9512b67423828bc717d84"
          },
          "meter_number": {
            "type": "string",
            "example": "12000111111111"
          }
        }
      },
      "IntervalDataListResponse": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "end_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "granularity": {
            "type": "string",
            "enum": ["hh", "day", "week", "month", "year"],
            "example": "hh",
            "default": "hh"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/interval_data"
            }
          }
        }
      },
      "consent": {
        "type": "object",
        "required": ["evidence_document_id", "customer_id", "start_date", "end_date", "type"],
        "properties": {
  
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Customer Id"
          },
          "type": {
            "type": "string",
            "enum": ["interval"],
            "example": "interval",
            "default": "interval"
          },
          "name": {
            "type": "string",
            "example": "Consent Name",
            "description": "Name of the consent"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "evidence_document_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Document Id"
          }
        }
      },
      "ConsentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/consent"
            }
          }
        }
      },
      "document": {
        "type": "object",
        "required": ["file", "name, purpose"],
        "properties": {
  
          "name": {
            "type": "string",
            "example": "Consent Name",
            "description": "Name of the consent"
          },
          "purpose": {
            "type": "string",
            "enum": ["consent_evidence"],
            "example": "consent_evidence",
            "description": "Purpose of the document"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DocumentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/document"
            }
          }
        }
      }
    }
  }
}
