{
  "openapi": "3.0.0",
  "info": {
    "title": "Openvolt API",
    "description": "Openvolt developer API",
    "contact": {
      "email": "don@openvolt.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.openvolt.com/v1"
    }
  ],
  "tags": [
    {
      "name": "Meters",
      "description": ""
    }
  ],
  "paths": {
    "/meters": {
      "get": {
        "tags": ["Meters"],
        "summary": "List meters",
        "description": "The Meter Object contains the Meter Number (often referred to as the MPAN), and other meta data such as the last time data was pulled from the meter, the update frequency, the data source, and the status of the meter.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_number",
            "in": "query",
            "description": "Filter by meter number (mpan)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Use prefixed keys to filter by metadata, e.g., metadata[dynamic_meter_ref]=1234567. The key in brackets represents the metadata key, and the associated value is the metadata value to filter by.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_data_pull_date",
            "in": "query",
            "description": "Filter by last_data_pull_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "last_data_pull_status",
            "in": "query",
            "description": "Filter by last_data_pull_status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["success", "failure"],
              "example": "success"
            }
          },
          {
            "name": "update_frequency",
            "in": "query",
            "description": "Filter by update_frequency",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hourly", "daily", "weekly", "monthly"],
              "example": "daily"
            }
          },
          {
            "name": "data_source",
            "in": "query",
            "description": "Filter by data_source",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["electralink", "dcc"],
              "example": "electralink"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "closed"],
              "example": "active"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["last_data_pull_date"],
              "example": "last_data_pull_date",
              "default": "last_data_pull_date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterListResponse"
                }
              }
            }
          }
        }
      },

      "post": {
        "tags": ["Meters"],
        "summary": "Create a meter",
        "description": "Create a meter",
        "requestBody": {
          "description": "meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/meter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "501": {
            "description": "Not Implemented"
          }
        }
      }
    },

    "/meters/{_id}": {
      "put": {
        "tags": ["Meters"],
        "summary": "Update a meter",
        "description": "Update a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/meter"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "meter",
        "responses": {
          "201": {
            "description": "meter updated",
            "content": {}
          },
          "400": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Meters"],
        "summary": "Delete a meter",
        "description": "Delete a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "613a4b5acbcc00d89f06b6c0",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "204": {
            "description": "meter deleted",
            "content": {}
          },
          "404": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "get": {
        "tags": ["Meters"],
        "summary": "Retrieve a meter",
        "description": "Retrieve a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "meter successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/meter"
                  },
                  "maxItems": 100
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    },

    "/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "List customers",
        "description": "",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Customer email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Use prefixed keys to filter by metadata, e.g., metadata[dynamic_cust_ref]=1234567. The key in brackets represents the metadata key, and the associated value is the metadata value to filter by.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of customers to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a customer",
        "description": "Create a customer",
        "requestBody": {
          "description": "New Customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "x-codegen-request-body-name": "customer",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },

    "/customers/{_id}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a customer",
        "description": "Retrieve a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "customer successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Update a customer",
        "description": "Update a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "customer",
        "responses": {
          "201": {
            "description": "customer updated",
            "content": {}
          },
          "400": {
            "description": "invalid input, object invalid",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a customer",
        "description": "Delete a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },

    "/interval-data": {
      "get": {
        "tags": ["Interval Data"],
        "summary": "Get interval data",
        "description": "",
        "parameters": [
          {
            "name": "meter_number",
            "in": "query",
            "description": "meter_number (also known as MPAN) can be used with different customers. If filtering by this, then also filter by customer_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "Commonly used with meter_number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_id",
            "in": "query",
            "description": "meter_id already contains the meter_number and customer_id, so can be used on its own",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "How granular to return the data. Half-hourly is denoted by 'hh'",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hh", "day", "week", "month", "year"],
              "example": "hh",
              "default": "hh"
            }
          },
          {
            "name": "lookback",
            "in": "query",
            "description": "timeperiod to lookback, in the form of a number followed by a letter, e.g. 1d, 1w, 3m, 1y",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1d",
              "default": "1d"
            }
          },

          {
            "name": "start_date",
            "in": "query",
            "description": "Filter by start_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter by end_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalDataListResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "security": [
    {
      "AuthKeyAuth": []
    }
  ],

  "components": {
    "securitySchemes": {
      "AuthKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "customer": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6"
          },
          "name": {
            "type": "string",
            "example": "Apple"
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com"
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg"
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date",
                  "example": "2022-11-1"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2022-11-1"
          }
        }
      },
      "CustomerListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customer"
            }
          }
        }
      },
      "meter": {
        "type": "object",
        "properties": {
          "meter_number": {
            "type": "string",
            "example": "10301782222"
          },
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6"
          },
          "description": {
            "type": "string",
            "example": "Electricity meter ground floor"
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "user_defined_string": "1234-5678"
            }
          },
          "last_data_pull_date": {
            "type": "string",
            "format": "date",
            "example": "2022-11-1"
          },
          "last_data_pull_status": {
            "type": "string",
            "enum": ["success", "failure"],
            "example": "success"
          },

          "update_frequency": {
            "type": "string",
            "enum": ["hourly", "daily", "weekly", "monthly"],
            "example": "daily"
          },

          "data_source": {
            "type": "string",
            "enum": ["electralink", "dcc"],
            "example": "electralink"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "closed"],
            "example": "active"
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                },
                "author": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "MeterListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meter"
            }
          }
        }
      },

      "interval_data": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "consumption": {
            "type": "number",
            "example": "123"
          },
          "consumption_units": {
            "type": "string",
            "enum": ["kwh"],
            "example": "kwh"
          },
          "account_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "meter_id": {
            "type": "string",
            "example": "63f9512b67423828bc717d84"
          },
          "meter_number": {
            "type": "string",
            "example": "12000111111111"
          }
        }
      },
      "IntervalDataListResponse": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "end_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "granularity": {
            "type": "string",
            "enum": ["hh", "day", "week", "month", "year"],
            "example": "hh",
            "default": "hh"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/interval_data"
            }
          }
        }
      }
    }
  }
}
