{
  "openapi": "3.0.0",
  "info": {
    "title": "Openvolt API",
    "description": "Openvolt developer API",
    "contact": {
      "email": "don@openvolt.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.openvolt.com/v1"
    }
  ],
  "tags": [
    {
      "name": "Meters",
      "description": ""
    }
  ],
  "paths": {
    "/meters": {
      "get": {
        "tags": ["Meters"],
        "summary": "List meters",
        "description": "The Meter Object contains the Meter Number (often referred to as the MPAN), and other meta data such as the last time data was pulled from the meter, the update frequency, the data source, and the status of the meter.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_number",
            "in": "query",
            "description": "Filter by meter number (mpan)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_data_pull_date",
            "in": "query",
            "description": "Filter by last_data_pull_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "last_data_pull_status",
            "in": "query",
            "description": "Filter by last_data_pull_status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["success", "failure"],
              "example": "success"
            }
          },
          {
            "name": "update_frequency",
            "in": "query",
            "description": "Filter by update_frequency",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hourly", "daily", "weekly", "monthly"],
              "example": "daily"
            }
          },
          {
            "name": "data_source",
            "in": "query",
            "description": "Filter by data_source",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MeterDataSource"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "pending"],
              "example": "active"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["last_data_pull_date"],
              "example": "last_data_pull_date",
              "default": "last_data_pull_date"
            }
          },
          {
            "name": "missing_consent",
            "in": "query",
            "description": "Filter by missing_consent",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "expired_consent",
            "in": "query",
            "description": "Filter by expired_consent",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "is_disabled_by_user",
            "in": "query",
            "description": "Filter by is_disabled_by_user",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "has_invalid_meter_number",
            "in": "query",
            "description": "Filter by has_invalid_meter_number",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Meters"],
        "summary": "Create a meter",
        "description": "On the Openvolt platform, a meter is a digital representation of the physical meter that's on the side of your customer's building. It also includes information such as \n\n - Who we are accessing this meter data on_behalf_of (customer) \n - The consent information that is needed for that party to access the data (consent) \n - The schedule on how often the data is refreshed on the meter (schedule) \n - The source of the centralised datasource that the meter feeds into \n - Physical address and other information \n\n It's important to note, that it is possible to have multiple meters with the same meter_number if you are accessing data on_behalf_of different customers",
        "requestBody": {
          "description": "Meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Meter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "501": {
            "description": "Not Implemented"
          }
        }
      }
    },
    "/meters/{_id}": {
      "put": {
        "tags": ["Meters"],
        "summary": "Update a meter",
        "description": "Update a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "meter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseMeter"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "meter",
        "responses": {
          "201": {
            "description": "meter updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      },
      "delete": {
        "tags": ["Meters"],
        "summary": "Delete a meter",
        "description": "Delete a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "613a4b5acbcc00d89f06b6c0",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "meter deleted"
          },
          "404": {
            "description": "invalid input, object invalid"
          }
        }
      },
      "get": {
        "tags": ["Meters"],
        "summary": "Retrieve a meter",
        "description": "Retrieve a meter",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "meter successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meter"
                  },
                  "maxItems": 100
                }
              }
            }
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/meters/{_id}/update-consent": {
      "put": {
        "tags": ["Meters"],
        "summary": "Update a meter consent",
        "description": "Update a meter consent",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "meter object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Meter consent id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterConsentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "meter",
        "responses": {
          "201": {
            "description": "meter updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "List customers",
        "description": "This is the main search functionality for customers. You can filter by email, metadata, and page number.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Each customer email is unique, so filtering by customer will return a single customer.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of customers to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Create a customer",
        "description": "Most likely, your customers will be stored on your system with a unique id. Use the `metadata` property on the Openvolt `customer` object to store this data so you can link both objects together. \n\n Customer emails are also unique so can be used to retrieve a single customer.",
        "requestBody": {
          "description": "New Customer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateRequest"
              }
            }
          },
          "x-codegen-request-body-name": "customer",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/customers/{_id}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Retrieve a customer",
        "description": "Retrieve a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "customer successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "resource not found"
          }
        }
      },
      "put": {
        "tags": ["Customers"],
        "summary": "Update a customer",
        "description": "Update a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "x-codegen-request-body-name": "customer",
        "responses": {
          "201": {
            "description": "customer updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a customer",
        "description": "Delete a customer",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "customer object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/interval-data": {
      "get": {
        "tags": ["Interval Data"],
        "summary": "Get interval data",
        "description": "",
        "parameters": [
          {
            "name": "meter_number",
            "in": "query",
            "description": "meter_number (also known as MPAN) can be used with different customers. If filtering by this, then also filter by customer_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "query",
            "description": "Commonly used with meter_number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meter_id",
            "in": "query",
            "description": "meter_id already contains the meter_number and customer_id, so can be used on its own",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "How granular to return the data. Half-hourly is denoted by 'hh'",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["hh", "day", "week", "month", "year"],
              "example": "hh",
              "default": "hh"
            }
          },
          {
            "name": "lookback",
            "in": "query",
            "description": "timeperiod to lookback, in the form of a number followed by a letter, e.g. 1d, 1w, 3m, 1y",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1d",
              "default": "1d"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Filter by start_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter by end_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalDataListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/consents": {
      "get": {
        "tags": ["Consents"],
        "summary": "List consents",
        "description": "This is the main search functionality for consents. You can filter by customer_id, metadata, type, start and end dates.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "Filter by customer id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Filter by start_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter by end_date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2022-11-1"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["end_date, start_date"],
              "example": "end_date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consents"],
        "summary": "Create a consent",
        "description": "",
        "requestBody": {
          "description": "Consent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/consents/{_id}": {
      "get": {
        "tags": ["Consents"],
        "summary": "Retrieve a consent",
        "description": "Retrieve a consent",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "consent object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "consent successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Consent"
                  },
                  "maxItems": 100
                }
              }
            }
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/consents/{_id}/archive": {
      "post": {
        "tags": ["Consents"],
        "summary": "Archive a consent",
        "description": "Archive a consent",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "consent object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "consent successfully archived"
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/documents": {
      "get": {
        "tags": ["Documents"],
        "summary": "List documents",
        "description": "This is the main search functionality for documents. You can filter by name, metadata, purpose.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "description": "Filter by purpose",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["consent_evidence"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "example": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of meters to retrieve per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 20
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort by the given field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["end_date, start_date"],
              "example": "end_date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Documents"],
        "summary": "Create a document",
        "description": "",
        "requestBody": {
          "description": "Document",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/documents/{_id}": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve a document",
        "description": "Retrieve a document",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "document object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "document successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/documents/{_id}/file": {
      "get": {
        "tags": ["Documents"],
        "summary": "Retrieve a document's file",
        "description": "Retrieve a document's file",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "document object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "file successfully retrieved",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "resource not found"
          }
        }
      }
    },
    "/hosted-consents": {
      "post": {
        "security": [
          {
            "AuthKeyAuth": []
          }
        ],
        "tags": ["Hosted Consents"],
        "summary": "Create a Hosted Consent Flow",
        "description": "A Hosted Consent flow can be used to direct users towards Openvolt to provide consent for collecting meter data. Without consent being provided, Openvolt will not be able to retrieve data for your meter.",
        "requestBody": {
          "description": "Creating a hosted consent flow only requires a few pieces of information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHostedConsentFlow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedConsent"
                }
              }
            }
          }
        }
      }
    },
    "/hosted-consents/{_id}": {
      "get": {
        "security": [
          {
            "AuthKeyAuth": []
          },
          {
            "HostedConsentToken": []
          }
        ],
        "tags": ["Hosted Consents"],
        "summary": "Get information about a hosted consent",
        "description": "A Hosted Consent provides information about the consent an end-user has given to specific meter numbers.",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "hosted consent object id",
            "example": "64106fcd8946e00aeaa8509f",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hosted consent successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedConsent"
                }
              }
            }
          },
          "404": {
            "description": "resource not found",
            "content": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "AuthKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "AuthKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "HostedConsentToken": {
        "type": "apiKey",
        "in": "header",
        "name": "x-consent-token"
      }
    },
    "schemas": {
      "file_metadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "image.png",
            "description": "The original filename of the file"
          },
          "file_type": {
            "type": "string",
            "example": "image/png",
            "description": "The mimetype for this file"
          },
          "size": {
            "type": "number",
            "example": 449,
            "description": "The size of the file in bytes"
          }
        }
      },
      "account": {
        "type": "object",
        "required": ["id","name"],
        "properties": {
          "id": {
            "type": "string",
            "example": "65a7f5449e51f6170f23c99f",
            "description": "The id of the account"
          },
          "name": {
            "type": "string",
            "example": "Stark Industries",
            "description": "The name of the account holder"
          },
          "theme": {
            "type": "string",
            "example": "#424b5c",
            "description": "Hex colour used for white-labelling"
          },
          "logo": {
            "type": "string",
            "example": "<base64 encoded string>",
            "description": "A base64 encoded string representing the file data"
          },
          "logo_metadata": {
            "$ref": "#/components/schemas/file_metadata"
          }
        }
      },
      "Country": {
        "type": "string",
        "description": "An ISO 3166 compliant country code",
        "enum": [
          "GB"
        ]
      },
      "ConsentFlowType": {
        "type": "string",
        "description": "The flow the user will use to provide consent",
        "enum": [
          "gb.commercial.blanket",
          "gb.domestic.specific"
        ]
      },
      "ConsentMethod": {
        "type": "string",
        "description": "The method by which a consentee chose to perform a consent",
        "enum": [
          "letter-of-authority",
          "digital-consent",
          "third-party-digital-consent"
        ]
      },
      "customer": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "CustomerCreateRequest": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Apple",
            "description": "Name of the customer. This is a required field."
          },
          "email": {
            "type": "string",
            "example": "steve@apple.com",
            "description": "Email of the customer. This is a required field and is also unique so can be used to retrieve a single customer."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the customer. This is an optional field."
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "logo_url": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Apple_Inc.#/media/File:Apple_logo_black.svg",
            "description": "URL of the customer logo. This is an optional field."
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "CustomerListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "BaseMeter": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Electricity meter ground floor",
            "description": "Description of the meter. This is an optional field."
          },
          "address": {
            "type": "string",
            "example": "One Apple Park Way, Cupertino, CA 95014, United States",
            "description": "Address of the meter. This is an optional field."
          },
          "data_source": {
            "$ref": "#/components/schemas/MeterDataSource"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "validity_state": {
            "$ref": "#/components/schemas/MeterValidityState"
          },
          "provider_info": {
            "discriminator": {
              "propertyName": "data_source",
              "mapping": {
                "anexo": "#/components/schemas/AnexoProviderInfo",
                "edsn": "#/components/schemas/EdsnProviderInfo",
                "joulz": "#/components/schemas/JoulzProviderInfo",
                "kenter": "#/components/schemas/KenterProviderInfo",
                "meetbedrijf": "#/components/schemas/MeetbedrijfProviderInfo",
                "solaredge": "#/components/schemas/SolaredgeProviderInfo"
              }
            },
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnexoProviderInfo"
              },
              {
                "$ref": "#/components/schemas/EdsnProviderInfo"
              },
              {
                "$ref": "#/components/schemas/JoulzProviderInfo"
              },
              {
                "$ref": "#/components/schemas/KenterProviderInfo"
              },
              {
                "$ref": "#/components/schemas/HetMeetbedrijfProviderInfo"
              },
              {
                "$ref": "#/components/schemas/SolarEdgeProviderInfo"
              }
            ]
          }
        }
      },
      "Meter": {
        "type": "object",
        "required": ["meter_number", "customer_id", "data_source"],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMeter"
          },
          "hosted_consent_id": {
            "type": "string",
            "example": "65b3dd10f5dd738edac11841",
            "description": "The id of a hosted consent you wish to attach to this meter"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "meter_number": {
                "type": "string",
                "example": "10301782222",
                "description": "Meter Number (also known as MPAN) and is a required field. This in combination with `customer_id` is unique so can be used to retrieve a single meter."
              },
              "customer_id": {
                "type": "string",
                "example": "6404dd7cf51306004a0cabf6",
                "description": "Customer ID is a required field. This in combination with `meter_number` is unique so can be used to retrieve a single meter."
              },
              "consent_id": {
                "type": "string",
                "example": "6404dd7cf51306004a0cabf6",
                "description": "The ID of the Consent. If none is provided, the status of the meter will be set to inactive"
              },
              "status": {
                "$ref": "#/components/schemas/MeterStatus"
              }
            }
          }
        ]
      },
      "MeterListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Meter"
            }
          }
        }
      },
      "MeterStatus": {
        "type": "string",
        "description": "The status of the meter",
        "readOnly": true,
        "enum": ["active", "inactive", "pending"],
        "example": "active"
      },
      "MeterType": {
        "type": "string",
        "enum": ["electricity", "gas"],
        "example": "electricity",
        "description": "Meter type"
      },
      "MeterDataSource": {
        "type": "string",
        "enum": [
          "electralink",
          "dcc",
          "anexo",
          "edsn",
          "joulz",
          "kenter",
          "meetbedrijf",
          "solaredge"
        ],
        "example": "electralink",
        "description": "Data source"
      },
      "MeterValidityState": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "missing_consent": {
            "type": "boolean"
          },
          "expired_consent": {
            "type": "boolean"
          },
          "is_disabled_by_user": {
            "type": "boolean"
          },
          "has_invalid_meter_number": {
            "type": "boolean"
          }
        }
      },
      "BaseNLProviderInfo": {
        "type": "object",
        "properties": {
          "postal_code": {
            "type": "string",
            "example": "1234AB",
            "description": "Postal code of the address of the meter",
            "pattern": "^\\d{4}[A-Z]{2}$"
          },
          "house_number": {
            "type": "string",
            "example": "1",
            "description": "House number of the address of the meter"
          },
          "customer": {
            "$ref": "#/components/schemas/customer"
          },
          "hosted_consent": {
            "$ref": "#/components/schemas/HostedConsent"
          },
          "valid": {
            "type": "boolean",
            "example": true,
            "description": "A computer value to let you know if this meter is valid, taking into account whether it has a valid hosted consent attached."
          },
          "description": {
            "type": "string",
            "example": "870111222333444555",
            "description": "EAN of the meter (18 digits, e.g. 870111222333444555)"
          },
          "meter_type": {
            "$ref": "#/components/schemas/MeterType"
          }
        }
      },
      "AnexoProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "meter_id": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The meter id for this provider"
              },
              "client_id": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The client id for this provider"
              },
              "client_secret": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The client secret for this provider"
              }
            }
          }
        ]
      },
      "EdsnProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "meterNumber": {
                "type": "string",
                "example": "E0011223344556677",
                "description": "The EDSN meter number"
              }
            }
          }
        ]
      },
      "JoulzProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "api_key": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The API key for the Joulz account"
              },
              "subcode": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The Joulz subcode of the meter"
              }
            }
          }
        ]
      },
      "KenterProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "MyKenterUser",
                "description": "The username for the Kenter account"
              },
              "password": {
                "type": "string",
                "example": "MyKenterPassword",
                "description": "The password for the Kenter account"
              }
            }
          }
        ]
      },
      "HetMeetbedrijfProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "api_key": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The API key for Het Meetbedrijf account"
              }
            }
          }
        ]
      },
      "SolarEdgeProviderInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNLProviderInfo"
          },
          {
            "type": "object",
            "properties": {
              "api_key": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The API key for the SolarEdge account"
              },
              "meter_id": {
                "type": "string",
                "example": "123456789012345678",
                "description": "The meter id for the SolarEdge account"
              }
            }
          }
        ]
      },
      "MeterConsentUpdateRequest": {
        "type": "object",
        "properties": {
          "consent_id": {
            "type": "string",
            "nullable": true,
            "example": "6404dd7cf51306004a0cabf6",
            "description": "The ID of the Consent. If null is provided, it will remove the consent."
          }
        }
      },
      "Metadata": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
        "example": {
          "user_defined_string": "1234-5678"
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "author": {
            "type": "string"
          }
        }
      },
      "IntervalData": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "consumption": {
            "type": "number",
            "example": "123"
          },
          "consumption_units": {
            "type": "string",
            "enum": ["kwh"],
            "example": "kwh"
          },
          "account_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "meter_id": {
            "type": "string",
            "example": "63f9512b67423828bc717d84"
          },
          "meter_number": {
            "type": "string",
            "example": "12000111111111"
          }
        }
      },
      "IntervalDataListResponse": {
        "type": "object",
        "properties": {
          "start_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "end_interval": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "granularity": {
            "type": "string",
            "enum": ["hh", "day", "week", "month", "year"],
            "example": "hh",
            "default": "hh"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntervalData"
            }
          }
        }
      },
      "Consent": {
        "type": "object",
        "required": ["evidence_document_id", "customer_id", "start_date", "end_date", "type"],
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Customer Id"
          },
          "type": {
            "type": "string",
            "enum": ["interval"],
            "example": "interval",
            "default": "interval"
          },
          "name": {
            "type": "string",
            "example": "Consent Name",
            "description": "Name of the consent"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "example": "2022-10-1"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "evidence_document_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Document Id"
          }
        }
      },
      "ConsentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          }
        }
      },
      "Document": {
        "type": "object",
        "required": ["file", "name", "purpose"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Document Name",
            "description": "Name of the document"
          },
          "purpose": {
            "type": "string",
            "enum": ["consent_evidence"],
            "example": "consent_evidence",
            "description": "Purpose of the document"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DocumentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        }
      },
      "CreateHostedConsentFlow": {
        "type": "object",
        "required": ["customer_id", "expiry", "redirect_url", "flow_type"],
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "6404dd7cf51306004a0cabf6",
            "description": "Id of the customer to whom this consent belongs to. This is a required field."
          },
          "expiry": {
            "type": "string",
            "format": "date",
            "example": "2024-12-7",
            "description": "The date in which this consent expires. NOTE: The validity of a consent includes up to midnight on the day of expiry."
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/authorize",
            "description": "The URL that end-users should be re-directed to when leaving Openvolt's hosted consent flow."
          },
          "meter_numbers": {
            "type": "array",
            "description": "An array of meter numbers, The hosted consent flow will prompt the end-user for their meter numbers if you do not provide them.",
            "items": {
              "type": "string"
            }
          },
          "flow_type": {
            "$ref": "#/components/schemas/ConsentFlowType"
          },
          "consentee_email": {
            "type": "string",
            "description": "The email of the consenting party can be pre-filled"
          },
          "consentee_full_name": {
            "type": "string",
            "description": "The full name of the consenting party can be pre-filled"
          },
          "consentee_job_title": {
            "type": "string",
            "description": "The job title of the consenting party can be pre-filled"
          },
          "consent_method": {
            "$ref": "#/components/schemas/ConsentMethod"
          }
        }
      },
      "HostedConsent": {
        "type": "object",
        "required": ["object","account","customer","expiry","callback","flow_type","consentee_email_verified","meter_numbers","token","created_at","hosted_consent_link","evidence","valid","id"],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the hosted consent",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "example": "hosted-consent",
            "description": "The object type",
            "readOnly": true
          },
          "account": {
            "$ref": "#/components/schemas/account"
          },
          "customer": {
            "$ref": "#/components/schemas/customer"
          },
          "expiry": {
            "type": "string",
            "format": "date",
            "example": "2025-01-26T12:21:27.299Z",
            "description": "The date in which this consent expires. NOTE: The validity of a consent includes up to midnight on the day of expiry."
          },
          "callback": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/authorize",
            "description": "The URL that end-users should be re-directed to when leaving Openvolt's hosted consent flow."
          },
          "flow_type": {
            "$ref": "#/components/schemas/ConsentFlowType"
          },
          "consentee_email_verified": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not the consentee's email has been verified for this consent",
            "readOnly": true
          },
          "meter_numbers": {
            "type": "array",
            "description": "An array of meter numbers, The hosted consent flow will prompt the end-user for their meter numbers if you do not provide them.",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string",
            "example": "8d66b3f5-418e-4873-b79e-b5082bf5eb3a",
            "description": "A token that aid in authenticating a hosted consent flow",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "example": "2024-01-26T12:21:27.299Z",
            "format": "datetime",
            "readOnly": true
          },
          "consent_method": {
            "$ref": "#/components/schemas/ConsentMethod"
          },

          "consentee_full_name": {
            "type": "string",
            "description": "The full name provided by the consenting party.",
            "readOnly": true
          },
          "consentee_job_title": {
            "type": "string",
            "description": "The job title provided by the consenting party.",
            "readOnly": true
          },
          "consentee_email": {
            "type": "string",
            "format": "email",
            "description": "The email provided by the consenting party in the hosted consent flow",
            "readOnly": true
          },

          "consented_at": {
            "type": "string",
            "example": "2024-01-26T12:21:27.299Z",
            "format": "datetime",
            "description": "The date at which this consent was fully completed i.e. The consenting party completed the hosted consent flow successfully.",
            "readOnly": true
          },
          "hosted_consent_version": {
            "type": "string",
            "example": "v0.0.2",
            "description": "The version of the hosted consent frontend that was used to provide consent, this is useful in case of spot audits in the future.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "example": "2024-01-26T12:21:27.299Z",
            "format": "datetime",
            "description": "The date at which the hosted consent was last updated",
            "readOnly": true
          },
          "revoked_at": {
            "type": "string",
            "example": "2024-01-26T12:21:27.299Z",
            "format": "datetime",
            "description": "The date at which this consent was revoked. This will be empty if the consent was not revoked",
            "readOnly": true
          },
          "hosted_consent_link": {
            "type": "string",
            "example": "https://consent.staging.openvolt.com/65b3a397a6907a1304...",
            "description": "The url that users should be re-directed to in order to complete this hosted consent. These urls are unique to each hosted consent.",
            "readOnly": true
          },
          "evidence": {
            "nullable": true,
            "type": "string",
            "description": "A base 64 encoded string of the evidence document",
            "readOnly": true
          },
          "evidence_document_metadata": {
            "$ref": "#/components/schemas/file_metadata"
          },
          "valid": {
            "type": "boolean",
            "example": false,
            "description": "Whether or not this consent is considered valid, meaning it is within its expiry date, it hasn't been revoked AND it has been completed."
          }


        }
      }
    }
  }
}
